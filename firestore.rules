rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Secure trip collection
    match /trips/{tripId} {
      // Anyone can read trips (for public viewing)
      allow read: if true;
      
      // Only allow creating new trips with valid data
      allow create: if isValidTripData(request.resource.data) &&
                       isReasonableSize(request.resource.data) &&
                       !isSpamming();
      
      // Only allow updates/deletes with admin privileges
      allow update, delete: if hasAdminPrivileges();
    }
    
    // Block all other collections
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Helper functions for security
    function isValidTripData(data) {
      return data.keys().hasAll(['location', 'date', 'members']) &&
             data.location is string &&
             data.location.size() > 0 &&
             data.location.size() <= 100 &&
             data.date is string &&
             data.date.matches('\\d{4}-\\d{2}-\\d{2}') &&
             data.members is list &&
             data.members.size() > 0 &&
             data.members.size() <= 20 &&
             validateOptionalFields(data);
    }
    
    function validateOptionalFields(data) {
      return (!('description' in data) || 
              (data.description is string && data.description.size() <= 1000)) &&
             (!('distance' in data) || 
              (data.distance is string && data.distance.size() <= 50)) &&
             (!('elevation' in data) || 
              (data.elevation is string && data.elevation.size() <= 50)) &&
             (!('duration' in data) || 
              (data.duration is string && data.duration.size() <= 50)) &&
             (!('photos' in data) || 
              (data.photos is list && 
               data.photos.size() <= 10 &&
               validatePhotoUrls(data.photos)));
    }
    
    function validatePhotoUrls(photos) {
      // Only allow Firebase Storage URLs or known safe domains
      return photos.hasAll([]) || photos.hasAny([
        photos[0].matches('.*firebasestorage\\.googleapis\\.com.*'),
        photos[0].matches('.*imgur\\.com.*'),
        photos[0].matches('.*googleusercontent\\.com.*')
      ]);
    }
    
    function isReasonableSize(data) {
      // Prevent overly large documents (approximate size check)
      return data.size() <= 50; // Max 50 fields
    }
    
    function isSpamming() {
      // Basic rate limiting - prevent rapid submissions
      // In a real app, you'd track this per IP or user
      return false; // For now, allow all (implement with Cloud Functions if needed)
    }
    
    function hasAdminPrivileges() {
      // For client-side auth, we can't truly validate server-side
      // This is a limitation of your current architecture
      // Consider this a placeholder for future server-side validation
      return request.auth != null && 
             request.auth.token.admin == true;
    }
  }
}